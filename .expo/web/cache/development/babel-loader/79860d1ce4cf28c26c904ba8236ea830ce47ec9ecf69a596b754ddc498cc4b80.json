{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useTheme } from \"react-native-paper\";\nimport { PaperSelect } from \"react-native-paper-select\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function ColorPicker(_ref) {\n  var colorState = _ref.colorState,\n    colorsHex = _ref.colorsHex,\n    returnColor = _ref.returnColor;\n  var _colorState = _slicedToArray(colorState, 2),\n    color = _colorState[0],\n    setColor = _colorState[1];\n  var theme = useTheme();\n  return _jsx(PaperSelect, {\n    label: \"Cor\",\n    value: color.value,\n    onSelection: function onSelection(selectedColor) {\n      setColor(_objectSpread(_objectSpread({}, color), {}, {\n        value: selectedColor.text,\n        error: \"\"\n      }));\n      color.list.map(function (obj, index) {\n        if (obj.value === selectedColor.text) {\n          var _color = colorsHex[index];\n          returnColor(_color);\n        }\n      });\n    },\n    arrayList: _toConsumableArray(color.list),\n    selectedArrayList: _toConsumableArray(color.selectedList),\n    multiEnable: false,\n    containerStyle: {\n      width: \"100%\"\n    },\n    textInputStyle: {\n      backgroundColor: theme.colors.background,\n      color: \"#FFFFFF\"\n    },\n    dialogStyle: {\n      backgroundColor: theme.colors.background\n    },\n    searchStyle: {\n      backgroundColor: theme.colors.backdrop\n    },\n    checkboxProps: {\n      checkboxLabelStyle: {\n        color: \"#FFFFFF\"\n      }\n    }\n  });\n}","map":{"version":3,"names":["useTheme","PaperSelect","jsx","_jsx","ColorPicker","_ref","colorState","colorsHex","returnColor","_colorState","_slicedToArray","color","setColor","theme","label","value","onSelection","selectedColor","_objectSpread","text","error","list","map","obj","index","arrayList","_toConsumableArray","selectedArrayList","selectedList","multiEnable","containerStyle","width","textInputStyle","backgroundColor","colors","background","dialogStyle","searchStyle","backdrop","checkboxProps","checkboxLabelStyle"],"sources":["/home/ojoquinhaa/Documentos/trabalho/inktone/fixar/components/Book/ColorPicker.tsx"],"sourcesContent":["import { Dispatch, SetStateAction, useState } from \"react\";\nimport { useTheme } from \"react-native-paper\";\nimport { PaperSelect } from \"react-native-paper-select\";\n\ntype ColorState = {\n  value: string;\n  list: { _id: string; value: string }[];\n  selectedList: any[];\n  error: string;\n};\n\ntype props = {\n  colorState: [ColorState, Dispatch<SetStateAction<ColorState>>];\n  colorsHex: string[];\n  returnColor: Dispatch<SetStateAction<string>>;\n};\n\nexport default function ColorPicker({\n  colorState,\n  colorsHex,\n  returnColor,\n}: props) {\n  const [color, setColor] = colorState;\n\n  const theme = useTheme();\n\n  return (\n    <PaperSelect\n      label=\"Cor\"\n      value={color.value}\n      onSelection={(selectedColor) => {\n        setColor({\n          ...color,\n          value: selectedColor.text,\n          error: \"\",\n        });\n        color.list.map((obj, index) => {\n          if (obj.value === selectedColor.text) {\n            const color: string = colorsHex[index];\n            returnColor(color);\n          }\n        });\n      }}\n      arrayList={[...color.list]}\n      selectedArrayList={[...color.selectedList]}\n      multiEnable={false}\n      containerStyle={{\n        width: \"100%\",\n      }}\n      textInputStyle={{\n        backgroundColor: theme.colors.background,\n        color: \"#FFFFFF\",\n      }}\n      dialogStyle={{ backgroundColor: theme.colors.background }}\n      searchStyle={{ backgroundColor: theme.colors.backdrop }}\n      checkboxProps={{ checkboxLabelStyle: { color: \"#FFFFFF\" } }}\n    />\n  );\n}\n"],"mappings":";;;;;AACA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,WAAW,QAAQ,2BAA2B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAexD,eAAe,SAASC,WAAWA,CAAAC,IAAA,EAIzB;EAAA,IAHRC,UAAU,GAAAD,IAAA,CAAVC,UAAU;IACVC,SAAS,GAAAF,IAAA,CAATE,SAAS;IACTC,WAAW,GAAAH,IAAA,CAAXG,WAAW;EAEX,IAAAC,WAAA,GAAAC,cAAA,CAA0BJ,UAAU;IAA7BK,KAAK,GAAAF,WAAA;IAAEG,QAAQ,GAAAH,WAAA;EAEtB,IAAMI,KAAK,GAAGb,QAAQ,CAAC,CAAC;EAExB,OACEG,IAAA,CAACF,WAAW;IACVa,KAAK,EAAC,KAAK;IACXC,KAAK,EAAEJ,KAAK,CAACI,KAAM;IACnBC,WAAW,EAAE,SAAAA,YAACC,aAAa,EAAK;MAC9BL,QAAQ,CAAAM,aAAA,CAAAA,aAAA,KACHP,KAAK;QACRI,KAAK,EAAEE,aAAa,CAACE,IAAI;QACzBC,KAAK,EAAE;MAAE,EACV,CAAC;MACFT,KAAK,CAACU,IAAI,CAACC,GAAG,CAAC,UAACC,GAAG,EAAEC,KAAK,EAAK;QAC7B,IAAID,GAAG,CAACR,KAAK,KAAKE,aAAa,CAACE,IAAI,EAAE;UACpC,IAAMR,MAAa,GAAGJ,SAAS,CAACiB,KAAK,CAAC;UACtChB,WAAW,CAACG,MAAK,CAAC;QACpB;MACF,CAAC,CAAC;IACJ,CAAE;IACFc,SAAS,EAAAC,kBAAA,CAAMf,KAAK,CAACU,IAAI,CAAE;IAC3BM,iBAAiB,EAAAD,kBAAA,CAAMf,KAAK,CAACiB,YAAY,CAAE;IAC3CC,WAAW,EAAE,KAAM;IACnBC,cAAc,EAAE;MACdC,KAAK,EAAE;IACT,CAAE;IACFC,cAAc,EAAE;MACdC,eAAe,EAAEpB,KAAK,CAACqB,MAAM,CAACC,UAAU;MACxCxB,KAAK,EAAE;IACT,CAAE;IACFyB,WAAW,EAAE;MAAEH,eAAe,EAAEpB,KAAK,CAACqB,MAAM,CAACC;IAAW,CAAE;IAC1DE,WAAW,EAAE;MAAEJ,eAAe,EAAEpB,KAAK,CAACqB,MAAM,CAACI;IAAS,CAAE;IACxDC,aAAa,EAAE;MAAEC,kBAAkB,EAAE;QAAE7B,KAAK,EAAE;MAAU;IAAE;EAAE,CAC7D,CAAC;AAEN"},"metadata":{},"sourceType":"module","externalDependencies":[]}