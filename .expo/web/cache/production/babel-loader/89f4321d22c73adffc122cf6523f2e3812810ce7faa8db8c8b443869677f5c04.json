{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"id\",\"initialRouteName\",\"defaultStatus\",\"backBehavior\",\"children\",\"screenListeners\",\"screenOptions\"],_excluded2=[\"openByDefault\",\"lazy\",\"drawerContentOptions\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import{createNavigatorFactory,DrawerRouter,useNavigationBuilder}from'@react-navigation/native';import*as React from'react';import warnOnce from'warn-once';import DrawerView from\"../views/DrawerView\";function DrawerNavigator(_ref){var id=_ref.id,initialRouteName=_ref.initialRouteName,customDefaultStatus=_ref.defaultStatus,backBehavior=_ref.backBehavior,children=_ref.children,screenListeners=_ref.screenListeners,screenOptions=_ref.screenOptions,restWithDeprecated=_objectWithoutProperties(_ref,_excluded);var openByDefault=restWithDeprecated.openByDefault,lazy=restWithDeprecated.lazy,drawerContentOptions=restWithDeprecated.drawerContentOptions,rest=_objectWithoutProperties(restWithDeprecated,_excluded2);var defaultScreenOptions={};if(drawerContentOptions){Object.assign(defaultScreenOptions,{drawerPosition:drawerContentOptions.drawerPosition,drawerType:drawerContentOptions.drawerType,swipeEdgeWidth:drawerContentOptions.edgeWidth,drawerHideStatusBarOnOpen:drawerContentOptions.hideStatusBar,keyboardDismissMode:drawerContentOptions.keyboardDismissMode,swipeMinDistance:drawerContentOptions.minSwipeDistance,overlayColor:drawerContentOptions.overlayColor,drawerStatusBarAnimation:drawerContentOptions.statusBarAnimation,gestureHandlerProps:drawerContentOptions.gestureHandlerProps});Object.keys(defaultScreenOptions).forEach(function(key){if(defaultScreenOptions[key]===undefined){delete defaultScreenOptions[key];}});warnOnce(drawerContentOptions,\"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\"+JSON.stringify(defaultScreenOptions,null,2)+\"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");}if(typeof lazy==='boolean'){defaultScreenOptions.lazy=lazy;warnOnce(true,\"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");}if(typeof openByDefault==='boolean'){warnOnce(true,\"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");}var defaultStatus=customDefaultStatus!==undefined?customDefaultStatus:openByDefault?'open':'closed';var _useNavigationBuilder=useNavigationBuilder(DrawerRouter,{id:id,initialRouteName:initialRouteName,defaultStatus:defaultStatus,backBehavior:backBehavior,children:children,screenListeners:screenListeners,screenOptions:screenOptions,defaultScreenOptions:defaultScreenOptions}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation,NavigationContent=_useNavigationBuilder.NavigationContent;return React.createElement(NavigationContent,null,React.createElement(DrawerView,_extends({},rest,{defaultStatus:defaultStatus,state:state,descriptors:descriptors,navigation:navigation})));}export default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","_ref","id","initialRouteName","customDefaultStatus","defaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","_objectWithoutProperties","_excluded","openByDefault","lazy","drawerContentOptions","rest","_excluded2","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","_useNavigationBuilder","state","descriptors","navigation","NavigationContent","createElement","_extends"],"sources":["/home/ojoquinhaa/Documentos/trabalho/inktone/frontend/node_modules/@react-navigation/drawer/src/navigators/createDrawerNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  id,\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      id,\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}