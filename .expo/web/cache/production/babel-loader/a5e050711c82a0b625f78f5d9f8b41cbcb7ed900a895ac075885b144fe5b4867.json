{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{UnavailabilityError}from'expo-modules-core';import ExpoSecureStore from\"./ExpoSecureStore\";export var AFTER_FIRST_UNLOCK=ExpoSecureStore.AFTER_FIRST_UNLOCK;export var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY=ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;export var ALWAYS=ExpoSecureStore.ALWAYS;export var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY=ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;export var ALWAYS_THIS_DEVICE_ONLY=ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;export var WHEN_UNLOCKED=ExpoSecureStore.WHEN_UNLOCKED;export var WHEN_UNLOCKED_THIS_DEVICE_ONLY=ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;var VALUE_BYTES_LIMIT=2048;export function isAvailableAsync(){return _isAvailableAsync.apply(this,arguments);}function _isAvailableAsync(){_isAvailableAsync=_asyncToGenerator(function*(){return!!ExpoSecureStore.getValueWithKeyAsync;});return _isAvailableAsync.apply(this,arguments);}export function deleteItemAsync(_x){return _deleteItemAsync.apply(this,arguments);}function _deleteItemAsync(){_deleteItemAsync=_asyncToGenerator(function*(key){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_ensureValidKey(key);if(!ExpoSecureStore.deleteValueWithKeyAsync){throw new UnavailabilityError('SecureStore','deleteItemAsync');}yield ExpoSecureStore.deleteValueWithKeyAsync(key,options);});return _deleteItemAsync.apply(this,arguments);}export function getItemAsync(_x2){return _getItemAsync.apply(this,arguments);}function _getItemAsync(){_getItemAsync=_asyncToGenerator(function*(key){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_ensureValidKey(key);return yield ExpoSecureStore.getValueWithKeyAsync(key,options);});return _getItemAsync.apply(this,arguments);}export function setItemAsync(_x3,_x4){return _setItemAsync.apply(this,arguments);}function _setItemAsync(){_setItemAsync=_asyncToGenerator(function*(key,value){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_ensureValidKey(key);if(!_isValidValue(value)){throw new Error(\"Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.\");}if(!ExpoSecureStore.setValueWithKeyAsync){throw new UnavailabilityError('SecureStore','setItemAsync');}yield ExpoSecureStore.setValueWithKeyAsync(value,key,options);});return _setItemAsync.apply(this,arguments);}function _ensureValidKey(key){if(!_isValidKey(key)){throw new Error(\"Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \\\".\\\", \\\"-\\\", and \\\"_\\\".\");}}function _isValidKey(key){return typeof key==='string'&&/^[\\w.-]+$/.test(key);}function _isValidValue(value){if(typeof value!=='string'){return false;}if(_byteCount(value)>VALUE_BYTES_LIMIT){console.warn('Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.');}return true;}function _byteCount(value){var bytes=0;for(var i=0;i<value.length;i++){var codePoint=value.charCodeAt(i);if(codePoint>=0xd800&&codePoint<0xe000){if(codePoint<0xdc00&&i+1<value.length){var next=value.charCodeAt(i+1);if(next>=0xdc00&&next<0xe000){bytes+=4;i++;continue;}}}bytes+=codePoint<0x80?1:codePoint<0x800?2:3;}return bytes;}","map":{"version":3,"names":["UnavailabilityError","ExpoSecureStore","AFTER_FIRST_UNLOCK","AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","ALWAYS","WHEN_PASSCODE_SET_THIS_DEVICE_ONLY","ALWAYS_THIS_DEVICE_ONLY","WHEN_UNLOCKED","WHEN_UNLOCKED_THIS_DEVICE_ONLY","VALUE_BYTES_LIMIT","isAvailableAsync","_isAvailableAsync","apply","arguments","_asyncToGenerator","getValueWithKeyAsync","deleteItemAsync","_x","_deleteItemAsync","key","options","length","undefined","_ensureValidKey","deleteValueWithKeyAsync","getItemAsync","_x2","_getItemAsync","setItemAsync","_x3","_x4","_setItemAsync","value","_isValidValue","Error","setValueWithKeyAsync","_isValidKey","test","_byteCount","console","warn","bytes","i","codePoint","charCodeAt","next"],"sources":["/home/ojoquinhaa/Documentos/trabalho/inktone/frontend/node_modules/expo-secure-store/src/SecureStore.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoSecureStore from './ExpoSecureStore';\n\nexport type KeychainAccessibilityConstant = number;\n\n// @needsAudit\n/**\n * The data in the keychain item cannot be accessed after a restart until the device has been\n * unlocked once by the user. This may be useful if you need to access the item when the phone\n * is locked.\n */\nexport const AFTER_FIRST_UNLOCK: KeychainAccessibilityConstant = ExpoSecureStore.AFTER_FIRST_UNLOCK;\n\n// @needsAudit\n/**\n * Similar to `AFTER_FIRST_UNLOCK`, except the entry is not migrated to a new device when restoring\n * from a backup.\n */\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * The data in the keychain item can always be accessed regardless of whether the device is locked.\n * This is the least secure option.\n */\nexport const ALWAYS: KeychainAccessibilityConstant = ExpoSecureStore.ALWAYS;\n\n// @needsAudit\n/**\n * Similar to `WHEN_UNLOCKED_THIS_DEVICE_ONLY`, except the user must have set a passcode in order to\n * store an entry. If the user removes their passcode, the entry will be deleted.\n */\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * Similar to `ALWAYS`, except the entry is not migrated to a new device when restoring from a backup.\n */\nexport const ALWAYS_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * The data in the keychain item can be accessed only while the device is unlocked by the user.\n */\nexport const WHEN_UNLOCKED: KeychainAccessibilityConstant = ExpoSecureStore.WHEN_UNLOCKED;\n\n// @needsAudit\n/**\n * Similar to `WHEN_UNLOCKED`, except the entry is not migrated to a new device when restoring from\n * a backup.\n */\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\n\nconst VALUE_BYTES_LIMIT = 2048;\n\n// @needsAudit\nexport type SecureStoreOptions = {\n  /**\n   * - iOS: The item's service, equivalent to `kSecAttrService`\n   * - Android: Equivalent of the public/private key pair `Alias`\n   * > If the item is set with the `keychainService` option, it will be required to later fetch the value.\n   */\n  keychainService?: string;\n  /**\n   * Option responsible for enabling the usage of the user authentication methods available on the device while\n   * accessing data stored in SecureStore.\n   * - iOS: Equivalent to `kSecAccessControlBiometryCurrentSet`\n   * - Android: Equivalent to `setUserAuthenticationRequired(true)` (requires API 23).\n   * Complete functionality is unlocked only with a freshly generated key - this would not work in tandem with the `keychainService`\n   * value used for the others non-authenticated operations.\n   */\n  requireAuthentication?: boolean;\n  /**\n   * Custom message displayed to the user while `requireAuthentication` option is turned on.\n   */\n  authenticationPrompt?: string;\n  /**\n   * Specifies when the stored entry is accessible, using iOS's `kSecAttrAccessible` property.\n   * @see Apple's documentation on [keychain item accessibility](https://developer.apple.com/library/content/documentation/Security/Conceptual/keychainServConcepts/02concepts/concepts.html).\n   * @default SecureStore.WHEN_UNLOCKED\n   * @platform ios\n   */\n  keychainAccessible?: KeychainAccessibilityConstant;\n};\n\n// @needsAudit\n/**\n * Returns whether the SecureStore API is enabled on the current device. This does not check the app\n * permissions.\n *\n * @return Promise which fulfils witch `boolean`, indicating whether the SecureStore API is available\n * on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoSecureStore.getValueWithKeyAsync;\n}\n\n// @needsAudit\n/**\n * Delete the value associated with the provided key.\n *\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that will reject if the value couldn't be deleted.\n */\nexport async function deleteItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n\n  if (!ExpoSecureStore.deleteValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n  }\n  await ExpoSecureStore.deleteValueWithKeyAsync(key, options);\n}\n\n// @needsAudit\n/**\n * Fetch the stored value associated with the provided key.\n *\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that resolves to the previously stored value, or `null` if there is no entry\n * for the given key. The promise will reject if an error occurred while retrieving the value.\n */\nexport async function getItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<string | null> {\n  _ensureValidKey(key);\n  return await ExpoSecureStore.getValueWithKeyAsync(key, options);\n}\n\n// @needsAudit\n/**\n * Store a keyâ€“value pair.\n *\n * @param key The key to associate with the stored value. Keys may contain alphanumeric characters\n * `.`, `-`, and `_`.\n * @param value The value to store. Size limit is 2048 bytes.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that will reject if value cannot be stored on the device.\n */\nexport async function setItemAsync(\n  key: string,\n  value: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n  if (!_isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n  if (!ExpoSecureStore.setValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'setItemAsync');\n  }\n  await ExpoSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\nfunction _ensureValidKey(key: string) {\n  if (!_isValidKey(key)) {\n    throw new Error(\n      `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`\n    );\n  }\n}\n\nfunction _isValidKey(key: string) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value: string) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n  if (_byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn(\n      'Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.'\n    );\n  }\n  return true;\n}\n\n// copy-pasted from https://stackoverflow.com/a/39488643\nfunction _byteCount(value: string) {\n  let bytes = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    const codePoint = value.charCodeAt(i);\n\n    // Lone surrogates cannot be passed to encodeURI\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        const next = value.charCodeAt(i + 1);\n\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n\n  return bytes;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}